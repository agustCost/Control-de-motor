//Codigo placa slave Id 1 (Medicion)
#include <Arduino.h>
#include <ModbusRTUSlave.h>

#define MODBUS_SERIAL Serial2   //pines 16(Rx) y 17(Tx)

//Estos valores se modifican en funcion de la configuracion del master
#define MODBUS_BAUD 9600
#define MODBUS_CONFIG SERIAL_8N1
#define MODBUS_UNIT_ID 1

ModbusRTUSlave modbus(MODBUS_SERIAL, 18);

static unsigned long lastUpdate = 0;

//se crean las listas de coils, discrete inputs, holding registers e input registers
const uint8_t numCoils = 0;
const uint8_t numDiscreteInputs = 1;
const uint8_t numHoldingRegisters = 0;
const uint8_t numInputRegisters = 0;

bool coils[numCoils];
bool discreteInputs[numDiscreteInputs];
uint16_t holdingRegisters[numHoldingRegisters];
uint16_t inputRegisters[numInputRegisters];

void setup() {
  //se inicializan los registros y la comunicacion por modbus
  pinMode(32, OUTPUT);
  pinMode(18, OUTPUT);
  digitalWrite(18, LOW); 

  modbus.configureCoils(coils, numCoils);
  modbus.configureDiscreteInputs(discreteInputs, numDiscreteInputs);
  modbus.configureHoldingRegisters(holdingRegisters, numHoldingRegisters);
  modbus.configureInputRegisters(inputRegisters, numInputRegisters);
  
  MODBUS_SERIAL.begin(MODBUS_BAUD, MODBUS_CONFIG, 16, 17);
  modbus.begin(MODBUS_UNIT_ID, MODBUS_BAUD, MODBUS_CONFIG);
  Serial.begin(9600);
}

void loop() {

  if (millis() - lastUpdate > 3000) {
    
    discreteInputs[0]= !discreteInputs[0];
    lastUpdate = millis();
  }
  if(discreteInputs[0]){
    digitalWrite(32, HIGH);
  }else{
    digitalWrite(32, LOW);
  }
  modbus.poll();
}
